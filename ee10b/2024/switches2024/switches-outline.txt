;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
;                        Switch Procedure Outlines                     	 	 ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Steven Lei
EECS10b HW2 Switches Procedure Outlines
* Note: I handed this in last year, but re-did it just to keep documentation 
		consistent. Some changes I made are:
			Updated Pseudo code format for all functions (makes it clearer)
			Updated DebounceSwitches to contain variable repeat rate
			Included definition of CONSTANTS

; CONSTANTS used in Pseudo code:

DEBOUNCE_TIME 	   = 10              ; debouncing time (10ms)
FAST_REPEAT_TIME   = 500      		 ; time until start fast repeating (500ms)
SLOW_RATE     	   = 200           	 ; slow repeat rate (200ms)
FAST_RATE     	   = 50              ; fast repeat rate (50ms)

SWITCH_PORT = PINE              	 ; switches are on port E
SWITCH_MASK = 0b10000001        	 ; mask bits 7 and 0 since only 6 buttons
SWITCH_UP 	= 0b11111111             ; switches are up when all bits are set

TRUE  = 0b11111111                   ; boolean TRUE is all bits high 
FALSE = 0b00000000                   ; boolean FALSE is all bits low

; InitSwitches
;
; Description:       Initializes the variables for the DebounceSwitches
;					 procedure.
;					  
; Operation:         Resets the debounce counter, the repeat counter, and the 
;					 repeat rate. The debounce flag is also reset to FALSE.
;					 The old and new switch pattern variables are reset to
;					 SWITCH_UP (all bits are high when switch is not pressed).
;
; Arguments:         None.
; Return Value:      None.
;
; Local Variables:   None.
; Shared Variables:  debounceCounter:	Counter used for debouncing and WRITTEN 
;									    as the debounce time (10 ms).
;					 repeatCounter:		Counter used for counting until the 
;										repeat rate is switched to fast, WRITTEN
;										as the fast repeat time (500ms)
;					 repeatRate:		The rate in which a repeated switch 
;										pattern is debounced, WRITTEN as 
;										the slow rate (50ms)
;					 debounceFlag: 		Flag indicating if a switch is 
;										debounced, WRITTEN to false.
;					 prevSwitchPatt:	Previous switch pattern, WRITTEN to 
;										SWITCH_UP
;					 newSwitchPatt: 	New debounced switch pattern, WRITTEN to 
;										SWITCH_UP 
;
; Global Variables:  None.
;
; Input:             None.
; Output:            None.
;
; Error Handling:    None.
;
; Algorithms:        None.
; Data Structures:   None.
;
; Registers Changed: R16
; Stack Depth:       0 bytes
;
; Limitations:		 None.
; Special notes:	 A pressed switch is represented with the low bit (0).
;
; Author:            Steven Lei
; Last Modified:	 03/26/2024
;
; Pseudo code:
	InitSwitches(){
		debounceCounter = DEBOUNCE_TIME
		repeatCounter	= FAST_REPEAT_TIME
		repeatRATE 		= SLOW_RATE
		debounceFlag	= FALSE
		newSwitchPatt	= SWITCH_UP
		prevSwitchPatt	= SWITCH_UP
	}


; DebounceSwitches
;
; Description:       Checks for a new switch pattern being pressed if none is
;					 currently being pressed, or debounces the currently pressed
;					 switches. This procedure is expected to be called by the 
;					 timer interrupt event handler every 1 ms. It uses variable
;					 auto repeat if a switch pattern is held down for a period
;					 of time (500ms).
;					  
; Operation:         Upon every call, the new switch pattern pressed (input from 
;					 pin E) is compared with the old switch pattern. If the
;					 pattern is the same AND is not switch up (no switches 
;					 pressed), the debounce counter will decrement. 
;					 When the debounce counter hits 0, the pattern is fully 
;					 debounced so the pattern is stored and the debounce flag is 
;					 set. The debounce counter is reloaded with the repeat rate.
;					 The repeat counter is also decremented until it hits 
;					 zero, in which the repeat rate will be changed. If the new 
;					 pattern does not satisfy these conditions, all counters 
;					 and the repeat rate will be reset to slow.
;                    
; Arguments:         None.
; Return Value:      None
;
; Local Variables:   None.
; Shared Variables:  prevSwitchPatt: 	the previous inputted switch pattern, 
;										READ to check if equal to input 
;										pattern, WRITTEN to update the old  
;										pattern to the input pattern			
;					 newSwitchPatt:		the fully debounced switch pattern, 
;									 	WRITTEN as the input pattern if the
;										debounce counter hits 0.
;					 debounceFlag:   	the debounce flag, WRITTEN as true 
;										if the debounce counter hits 0. 
; 					 debounceCounter:	Counter used for debouncing and WRITTEN 
;									    as the debounce time (10 ms).
;					 repeatCounter:		Counter used for counting until the 
;										repeat rate is switched to fast, WRITTEN
;										as the fast repeat time (5s)
;					 repeatRate:		The rate in which a repeated switch 
;										pattern is debounced, first slow (200ms)
;										then fast (50ms).
; Global Variables:  None.
; Global Variables:  None.
;
; Input:             None.
; Output:            None.
;
; Error Handling:    None.
;
; Algorithms:        None.
; Data Structures:   None.
;
; Registers Changed: Flags, R16, R17, Z (ZL | ZH)
; Stack Depth:       0
;
; Limitations:		 None.
; Special notes:	 A pressed switch is represented with the low bit (0).
;
; Author:            Steven Lei
; Last Modified:	 03/27/24
;
; Pseudo Code

	DebounceSwitches(){
		tempSwitchPatt	= SWITCH_PORT.input			  ; this is a register
		tempSwitchPatt = tempSwitchPatt | SWITCH_MASK ; mask unused bits 7 and 0
													
	IF (tempSwitchPatt == SWITCH_UP OR tempSwitchPatt != prevSwitchPatt) THEN{
		prevSwitchPatt = tempSwitchPatt			      ; always update prev patt
		debounceCounter = DEBOUNCE_TIME
		repeatCounter	= FAST_REPEAT_TIME
		repeatRATE 		= SLOW_RATE
	} ELSE {
		prevSwitchPatt = tempSwitchPatt			   	  ; always update prev patt
		debounceCounter--
		IF(debounceCounter == 0) THEN {			   	  ; only update new pattern
			newSwitchPatt = tempSwitchPatt				; if counter hits 0
			debounceFlag  = TRUE
			debounceCounter = repeatRATE
		} 
		repeatCounter--
		IF(repeatCounter == 0) THEN {
			repeatRate = FAST_RATE
		}
	}
	RETURN 
	}

; GetSwitches
;
; Description:      Returns the fully debounced code of the switch pattern that
;					was pressed by the user. This procedure is blocking since
;					it does not return until a switch has been pressed and 
;					debounced (but not necessarily released). The switch code 
;					is defined below.
;
; Operation:        Calls the SwitchAvailable() function with a blocking 
;					loop until the function returns true. Then returns the
;					debounced switch pattern in the register R16. Also resets
;					the debounce flag if a pattern is debounced. Note that
;					this is critical code because the debounced switch pattern
;					and debounce flag can't be changed while this procedure
;					is running. Thus, interrupts must be briefly disabled
;					and then re-enabled.
;					 
; Arguments:        None.
; Return Value:     newSwitchPatt: 8 bit debounced switch pattern in R16,
;					with each bit representing a switch in (reverse) one hot:
;						Bit code		Switch Pressed	Function
;						11011111		Black			Black hexagon rotator
;						11101111		Red				Red triangle rotator
;						11110111		White			White hexagon inverter
;						11111011		Green			Green triangle rotator
;						11111101		Blue			Blue hexagon rotator
;						10011111		Yellow + Black	Random reset
;						10111101		Yellow + Green	Manual reset 0
;						10111110		Yellow + Blue	Manual reset 1
;						Any other switch pattern does not do anything
;
; Local Variables:   None.
; Shared Variables:  newSwitchPatt:		The debounced switch pattern is READ to
;										R16.
;					 debounceFlag: 		WRITTEN to FALSE if a debounced switch
;										pattern is found.
; Global Variables:  None.
;
; Input:             None.
; Output:            None.
;
; Error Handling:    None.
;
; Algorithms:        None.
; Data Structures:   None.
;
; Limitations:		 None.
; Special notes:	 A pressed switch is represented by a low bit (0).
;
; Registers Changed: R0, R16, R17
; Stack Depth:       0 bytes
;
; Author:            Steven Lei
; Last Modified:	 03/26/24
;
; Pseudo code:

	GetSwitches(){
		WHILE(!SwitchAvailable){
									; blocking loop until switch is avaialble
		}					
		save(Flags)					; critical code - save flags		
		debounceFlag = FALSE
		register = newSwitchPatt 
		restore(Flags)
		RETURN						; done so return
	}

; SwitchAvailable
;
; Description:       Returns with the zero flag FALSE (reset) if a debounced  
;					 switch pattern is available and TRUE (set) otherwise. This 
;					 allows the blocking loop in GetSwitches() to terminate.
;
; Operation:         Resets the zero flag if there is a debounced switch pattern
;					 (debounceFlag is TRUE) and sets the zero flag otherwise
;					 (debounceFlag is FALSE). The debounceFlag is modified by
;					 the DebounceSwitches() funciton.
;                    
; Arguments:         None.
; Return Value:      Zero Flag RESET or Zero Flag SET in SREG.
;
; Local Variables:   None.
; Shared Variables:  Zero Flag:		WRITEN as FALSE if debounceFlag is TRUE, 
;									else TRUE if debounceFlag is FALSE. 
;					 debounceFlag: 	READ in R16 to set/reset Zero Flag. 
; Global Variables:  None.
;
; Input:             None.
; Output:            None.
;
; Error Handling:    None.
;
; Algorithms:        None.
; Data Structures:   None.
;
; Limitations:		 None.
; Special notes:	 None.
;
; Registers Changed: R16
; Stack Depth:       0
;
; Author:            Steven Lei
; Last Modified:	 03/27/24
;
; Pseudo code:

	SwitchAvailable(){
		ZeroFlag = !debounceFlag
		RETURN	
	}






